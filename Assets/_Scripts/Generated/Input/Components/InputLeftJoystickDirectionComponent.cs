//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputContext {

    public InputEntity leftJoystickDirectionEntity { get { return GetGroup(InputMatcher.LeftJoystickDirection).GetSingleEntity(); } }
    public Project0.LeftJoystickDirectionComponent leftJoystickDirection { get { return leftJoystickDirectionEntity.leftJoystickDirection; } }
    public bool hasLeftJoystickDirection { get { return leftJoystickDirectionEntity != null; } }

    public InputEntity SetLeftJoystickDirection(UnityEngine.Vector3 newValue) {
        if (hasLeftJoystickDirection) {
            throw new Entitas.EntitasException("Could not set LeftJoystickDirection!\n" + this + " already has an entity with Project0.LeftJoystickDirectionComponent!",
                "You should check if the context already has a leftJoystickDirectionEntity before setting it or use context.ReplaceLeftJoystickDirection().");
        }
        var entity = CreateEntity();
        entity.AddLeftJoystickDirection(newValue);
        return entity;
    }

    public void ReplaceLeftJoystickDirection(UnityEngine.Vector3 newValue) {
        var entity = leftJoystickDirectionEntity;
        if (entity == null) {
            entity = SetLeftJoystickDirection(newValue);
        } else {
            entity.ReplaceLeftJoystickDirection(newValue);
        }
    }

    public void RemoveLeftJoystickDirection() {
        leftJoystickDirectionEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Project0.LeftJoystickDirectionComponent leftJoystickDirection { get { return (Project0.LeftJoystickDirectionComponent)GetComponent(InputComponentsLookup.LeftJoystickDirection); } }
    public bool hasLeftJoystickDirection { get { return HasComponent(InputComponentsLookup.LeftJoystickDirection); } }

    public void AddLeftJoystickDirection(UnityEngine.Vector3 newValue) {
        var index = InputComponentsLookup.LeftJoystickDirection;
        var component = CreateComponent<Project0.LeftJoystickDirectionComponent>(index);
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceLeftJoystickDirection(UnityEngine.Vector3 newValue) {
        var index = InputComponentsLookup.LeftJoystickDirection;
        var component = CreateComponent<Project0.LeftJoystickDirectionComponent>(index);
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveLeftJoystickDirection() {
        RemoveComponent(InputComponentsLookup.LeftJoystickDirection);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherLeftJoystickDirection;

    public static Entitas.IMatcher<InputEntity> LeftJoystickDirection {
        get {
            if (_matcherLeftJoystickDirection == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.LeftJoystickDirection);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherLeftJoystickDirection = matcher;
            }

            return _matcherLeftJoystickDirection;
        }
    }
}
